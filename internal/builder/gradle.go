package builder

import (
	"deploy/internal/config"
	"deploy/internal/detector"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

// GradleBuilder Gradle ÊûÑÂª∫Âô®
type GradleBuilder struct {
	config  *config.Config
	options *BuildOptions
}

// NewGradleBuilder ÂàõÂª∫ Gradle ÊûÑÂª∫Âô®
func NewGradleBuilder(config *config.Config, options *BuildOptions) *GradleBuilder {
	return &GradleBuilder{
		config:  config,
		options: options,
	}
}

// GetType Ëé∑ÂèñÊûÑÂª∫Âô®Á±ªÂûã
func (g *GradleBuilder) GetType() detector.ProjectType {
	return detector.ProjectTypeGradle
}

// Validate È™åËØÅÊûÑÂª∫ÁéØÂ¢É
func (g *GradleBuilder) Validate() error {
	// Ê£ÄÊü• Java ÊòØÂê¶ÂÆâË£Ö
	if err := g.checkJava(); err != nil {
		return fmt.Errorf("Java ÁéØÂ¢ÉÊ£ÄÊü•Â§±Ë¥•: %w", err)
	}

	// Ê£ÄÊü• Gradle ÊòØÂê¶ÂèØÁî®
	if err := g.checkGradle(); err != nil {
		return fmt.Errorf("Gradle ÁéØÂ¢ÉÊ£ÄÊü•Â§±Ë¥•: %w", err)
	}

	// Ê£ÄÊü• build.gradle ÊòØÂê¶Â≠òÂú®
	buildGradlePath := filepath.Join(g.options.ProjectPath, "build.gradle")
	buildGradleKtsPath := filepath.Join(g.options.ProjectPath, "build.gradle.kts")

	if _, err := os.Stat(buildGradlePath); err != nil {
		if _, err := os.Stat(buildGradleKtsPath); err != nil {
			return fmt.Errorf("build.gradle Êàñ build.gradle.kts ‰∏çÂ≠òÂú®")
		}
	}

	return nil
}

// Build ÊâßË°åÊûÑÂª∫
func (g *GradleBuilder) Build() (*BuildResult, error) {
	startTime := time.Now()

	fmt.Println("üöÄ ÂºÄÂßãÊûÑÂª∫ Gradle È°πÁõÆ...")

	// ÂàáÊç¢Âà∞È°πÁõÆÁõÆÂΩï
	originalDir, err := os.Getwd()
	if err != nil {
		return nil, fmt.Errorf("Ëé∑ÂèñÂΩìÂâçÁõÆÂΩïÂ§±Ë¥•: %w", err)
	}
	defer os.Chdir(originalDir)

	if err := os.Chdir(g.options.ProjectPath); err != nil {
		return nil, fmt.Errorf("ÂàáÊç¢Âà∞È°πÁõÆÁõÆÂΩïÂ§±Ë¥•: %w", err)
	}

	// ÊâßË°å Gradle ÊûÑÂª∫
	if err := g.runGradleBuild(); err != nil {
		return &BuildResult{
			Success: false,
			Message: fmt.Sprintf("Gradle ÊûÑÂª∫Â§±Ë¥•: %v", err),
		}, err
	}

	// Êü•ÊâæÂπ∂ÊâìÂåÖÊûÑÂª∫‰∫ßÁâ©
	artifactPath, files, size, err := g.packageArtifacts()
	if err != nil {
		return &BuildResult{
			Success: false,
			Message: fmt.Sprintf("ÊâìÂåÖÂ§±Ë¥•: %v", err),
		}, err
	}

	buildTime := time.Since(startTime)

	fmt.Printf("‚úÖ Gradle È°πÁõÆÊûÑÂª∫ÂÆåÊàêÔºåËÄóÊó∂: %v\n", buildTime)
	fmt.Printf("üì¶ ÊûÑÂª∫‰∫ßÁâ©: %s (%.2f MB)\n", artifactPath, float64(size)/(1024*1024))

	return &BuildResult{
		Success:      true,
		ArtifactPath: artifactPath,
		Version:      g.options.Version,
		BuildTime:    buildTime.String(),
		Files:        files,
		Size:         size,
		Message:      "ÊûÑÂª∫ÊàêÂäü",
	}, nil
}

// checkJava Ê£ÄÊü• Java ÁéØÂ¢É
func (g *GradleBuilder) checkJava() error {
	cmd := exec.Command("java", "-version")
	output, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("Java Êú™ÂÆâË£ÖÊàñ‰∏çÂú® PATH ‰∏≠")
	}

	version := strings.Split(string(output), "\n")[0]
	fmt.Printf("‚úì Java ÁâàÊú¨: %s\n", strings.TrimSpace(version))

	// Ê£ÄÊü•ÁâàÊú¨ÊòØÂê¶Á¨¶ÂêàË¶ÅÊ±Ç
	if g.config.Java.JavaVersion != "" {
		fmt.Printf("  Ë¶ÅÊ±ÇÁâàÊú¨: %s\n", g.config.Java.JavaVersion)
	}

	return nil
}

// checkGradle Ê£ÄÊü• Gradle ÁéØÂ¢É
func (g *GradleBuilder) checkGradle() error {
	// ‰ºòÂÖà‰ΩøÁî®È°πÁõÆÊú¨Âú∞ÁöÑ gradlew
	gradlewPath := filepath.Join(g.options.ProjectPath, "gradlew")
	if _, err := os.Stat(gradlewPath); err == nil {
		// Á°Æ‰øù gradlew ÊúâÊâßË°åÊùÉÈôê
		if err := os.Chmod(gradlewPath, 0755); err != nil {
			fmt.Printf("‚ö†Ô∏è  ËÆæÁΩÆ gradlew ÊâßË°åÊùÉÈôêÂ§±Ë¥•: %v\n", err)
		}

		cmd := exec.Command(gradlewPath, "--version")
		cmd.Dir = g.options.ProjectPath
		output, err := cmd.Output()
		if err == nil {
			lines := strings.Split(string(output), "\n")
			for _, line := range lines {
				if strings.Contains(line, "Gradle") {
					fmt.Printf("‚úì %s (‰ΩøÁî®È°πÁõÆ gradlew)\n", strings.TrimSpace(line))
					break
				}
			}
			return nil
		}
	}

	// Â¶ÇÊûú gradlew ‰∏çÂèØÁî®ÔºåÂ∞ùËØïÁ≥ªÁªüÁöÑ gradle
	cmd := exec.Command("gradle", "--version")
	output, err := cmd.Output()
	if err != nil {
		return fmt.Errorf("Gradle Êú™ÂÆâË£ÖÊàñ‰∏çÂú® PATH ‰∏≠Ôºå‰∏îÈ°πÁõÆÊ≤°ÊúâÂèØÁî®ÁöÑ gradlew")
	}

	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		if strings.Contains(line, "Gradle") {
			fmt.Printf("‚úì %s (‰ΩøÁî®Á≥ªÁªü gradle)\n", strings.TrimSpace(line))
			break
		}
	}

	return nil
}

// runGradleBuild ÊâßË°å Gradle ÊûÑÂª∫
func (g *GradleBuilder) runGradleBuild() error {
	fmt.Println("üî® ÊâßË°å Gradle ÊûÑÂª∫...")

	// Á°ÆÂÆö‰ΩøÁî®ÁöÑ Gradle ÂëΩ‰ª§
	gradleCmd := g.getGradleCommand()

	// ÊûÑÂª∫‰ªªÂä°
	tasks := []string{"clean", "build"}
	if g.options.SkipTests {
		tasks = []string{"clean", "build", "-x", "test"}
	}

	// ‰ªéÈÖçÁΩÆ‰∏≠Ëé∑ÂèñËá™ÂÆö‰πâÊûÑÂª∫ÂëΩ‰ª§
	if g.config.Java.BuildCommand != "" && g.config.Java.BuildTool == "gradle" {
		parts := strings.Fields(g.config.Java.BuildCommand)
		if len(parts) > 1 {
			tasks = parts[1:] // Ë∑≥Ëøá gradle/gradlew ÂëΩ‰ª§Êú¨Ë∫´
		}
	}

	cmd := exec.Command(gradleCmd, tasks...)
	cmd.Dir = g.options.ProjectPath

	if g.options.Verbose {
		cmd.Stdout = os.Stdout
		cmd.Stderr = os.Stderr
	}

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("ÊâßË°å %s %s Â§±Ë¥•: %w", gradleCmd, strings.Join(tasks, " "), err)
	}

	fmt.Println("‚úì Gradle ÊûÑÂª∫ÂÆåÊàê")
	return nil
}

// getGradleCommand Ëé∑Âèñ Gradle ÂëΩ‰ª§
func (g *GradleBuilder) getGradleCommand() string {
	// ‰ºòÂÖà‰ΩøÁî®È°πÁõÆÊú¨Âú∞ÁöÑ gradlew
	gradlewPath := filepath.Join(g.options.ProjectPath, "gradlew")
	if _, err := os.Stat(gradlewPath); err == nil {
		return gradlewPath
	}

	// ‰ΩøÁî®Á≥ªÁªüÁöÑ gradle
	return "gradle"
}

// packageArtifacts ÊâìÂåÖÊûÑÂª∫‰∫ßÁâ©
func (g *GradleBuilder) packageArtifacts() (string, []string, int64, error) {
	fmt.Println("üì¶ Êü•ÊâæÂπ∂ÊâìÂåÖÊûÑÂª∫‰∫ßÁâ©...")

	// Êü•Êâæ JAR Êñá‰ª∂
	jarFiles, err := g.findJarFiles()
	if err != nil {
		return "", nil, 0, fmt.Errorf("Êü•Êâæ JAR Êñá‰ª∂Â§±Ë¥•: %w", err)
	}

	if len(jarFiles) == 0 {
		return "", nil, 0, fmt.Errorf("Êú™ÊâæÂà∞ JAR Êñá‰ª∂")
	}

	// ÈÄâÊã©‰∏ªË¶ÅÁöÑ JAR Êñá‰ª∂
	mainJar := g.selectMainJar(jarFiles)

	// ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
	outputDir := g.options.OutputPath
	if outputDir == "" {
		outputDir = "./build"
	}
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		return "", nil, 0, fmt.Errorf("ÂàõÂª∫ËæìÂá∫ÁõÆÂΩïÂ§±Ë¥•: %w", err)
	}

	// ÁîüÊàêÁâàÊú¨Âè∑
	version := g.options.Version
	if version == "" {
		version = time.Now().Format("20060102-150405")
	}

	// Â§çÂà∂ JAR Êñá‰ª∂Âà∞ËæìÂá∫ÁõÆÂΩï
	artifactName := fmt.Sprintf("%s-%s.jar", g.config.Project.Name, version)
	artifactPath := filepath.Join(outputDir, artifactName)

	if err := g.copyFile(mainJar, artifactPath); err != nil {
		return "", nil, 0, fmt.Errorf("Â§çÂà∂ JAR Êñá‰ª∂Â§±Ë¥•: %w", err)
	}

	// Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØ
	stat, err := os.Stat(artifactPath)
	if err != nil {
		return "", nil, 0, fmt.Errorf("Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØÂ§±Ë¥•: %w", err)
	}

	files := []string{filepath.Base(artifactPath)}
	size := stat.Size()

	fmt.Printf("‚úì ÊâìÂåÖÂÆåÊàê: %s\n", artifactPath)
	return artifactPath, files, size, nil
}

// findJarFiles Êü•Êâæ JAR Êñá‰ª∂
func (g *GradleBuilder) findJarFiles() ([]string, error) {
	buildDir := "build/libs"

	var jarFiles []string

	err := filepath.Walk(buildDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if strings.HasSuffix(info.Name(), ".jar") {
			jarFiles = append(jarFiles, path)
		}

		return nil
	})

	return jarFiles, err
}

// selectMainJar ÈÄâÊã©‰∏ªË¶ÅÁöÑ JAR Êñá‰ª∂
func (g *GradleBuilder) selectMainJar(jarFiles []string) string {
	// ‰ºòÂÖàÈÄâÊã©‰∏çÂåÖÂê´ sources„ÄÅjavadoc„ÄÅtests ÁöÑ JAR Êñá‰ª∂
	for _, jar := range jarFiles {
		name := filepath.Base(jar)
		if !strings.Contains(name, "sources") &&
			!strings.Contains(name, "javadoc") &&
			!strings.Contains(name, "tests") &&
			!strings.Contains(name, "plain") { // Gradle ÊúâÊó∂‰ºöÁîüÊàê plain JAR
			return jar
		}
	}

	// Â¶ÇÊûúÊ≤°ÊâæÂà∞ÔºåËøîÂõûÁ¨¨‰∏Ä‰∏™
	if len(jarFiles) > 0 {
		return jarFiles[0]
	}

	return ""
}

// copyFile Â§çÂà∂Êñá‰ª∂
func (g *GradleBuilder) copyFile(src, dst string) error {
	sourceFile, err := os.Open(src)
	if err != nil {
		return err
	}
	defer sourceFile.Close()

	destFile, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer destFile.Close()

	_, err = destFile.ReadFrom(sourceFile)
	return err
}
